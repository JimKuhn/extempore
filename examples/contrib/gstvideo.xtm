;;; gstreamer.xtm -- Simple GStreamer playbin example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: gstreamer

;;; Commentary:

;; A simple 'synchronous' gstreamer example
;; plays back a single video file
;;
;; This is about as simple an example as
;; possible that still uses the standard
;; extempore rendering pipeline

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 1200)
(bind-val height i32 800)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")
(sys:load "libs/external/gstreamer.xtm")

(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val tex Texture (Texture_create))
(bind-val sp ShaderProgram
  (ShaderProgram_create
   (sys_slurp_file "examples/external/shader-tutorials/texture.vert")
   (sys_slurp_file "examples/external/shader-tutorials/texture.frag")))

(bind-func xtm_frame_data_to_tex
  (lambda (tex data)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D tex)
    (glTexImage2D GL_TEXTURE_2D
                  0
                  GL_RGB
                  width height
                  0
                  GL_RGB
                  GL_UNSIGNED_BYTE
                  data)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
    (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
    (gl_print_error "in xtm_frame_data_to_tex")))

(bind-val vplay i1 0)

(bind-func xtm_decode 5000000
  (let ((data:i8* (alloc (* 1200 800 3)))
        (playing #f))
    (lambda (playz:GstElement* sink:GstElement* time rate preroll:i1)
      (println "here")
      (println "playz:" playz "sink:" sink "time:" time "rate:" rate "preroll:" preroll)
      (if (= (gst_app_sink_is_eos (cast sink GstAppSink*)) 1)
          (begin
            (println "Finished streaming, try another video.")
            (gst_element_set_state playz GST_STATE_NULL)      
            (gst_object_unref (cast playz gpointer))
            (set! vplay #f)
            void)
          (let ((sample (gst_app_sink_pull_sample (cast sink i8*)))
                (caps (gst_sample_get_caps sample))
                (buffer (gst_sample_get_buffer sample))
                (xsize:gsize 0))
            (if preroll
                (let ((st (gst_caps_get_structure caps 0))
                      (gv (gst_structure_get_value st "framerate"))
                      (num (gst_value_get_fraction_numerator gv))
                      (denom (gst_value_get_fraction_denominator gv)))
                  (set! vplay #t)
                  (set! rate (ftoi64 (/ 44100.0 (/ (i32tof num) (i32tof denom)))))
                  (printf "Play format: %s\n" (gst_caps_to_string caps))))
            (set! xsize (gst_buffer_extract buffer 0 data (* 3 1200 800)))
            ;; load texture into 11
            (if (= xsize (* 3 1200 800))
                (xtm_frame_data_to_tex tex data))
            (if (or preroll (and (> rate 0) (> xsize 0)))
                (callback (+ time (/ rate 2)) xtm_decode playz sink (+ time rate) rate #f)
                (begin
                  (set! vplay #f)
                  (println "Are we here :(\n"))))))))

;; path must be a valid URI to media

(bind-func xtm_play
  (lambda (path)
    (if vplay
        (println "Wait to finish the running video first!\n")
        (let ((bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
              (caps:GstCaps* (gst_caps_from_string "video/x-raw,format=RGB,width=1200,height=800"))
              (rgbFilter:GstElement* (gst_element_factory_make "capsfilter" "rgb_filter"))
              (appBin:GstElement* (gst_bin_new "app_bin"))
              (rgbSinkPad:GstPad* null)
              (ghostPad:GstPad* null)
              (gv:GValue* (alloc)))
          ;; force video decode to RGB 1200x800
          (gst_app_sink_set_caps (cast sinkz i8*) caps)
          ;; Replace the default window sink with appsink,
          (g_value_init gv G_TYPE_OBJECT)
          (g_value_set_object gv (cast sinkz gpointer))
          (g_object_set_property (cast playz GObject*) "video-sink" gv)
          ;; URI to load media from
          (g_value_unset gv)
          (g_value_init gv G_TYPE_STRING)
          (g_value_set_string gv path)      
          (g_object_set_property (cast playz GObject*) "uri" gv)
          ;; start decoding the media!
          (gst_element_set_state playz GST_STATE_PLAYING)
          (println "hodi")
          (callback (now) xtm_decode playz sinkz (now) 1024 #t)))))

(bind-func gl_draw_loop
  (let ((playbin (gst_element_factory_make "playbin" "play"))
        (appsink (gst_element_factory_make "appsink" "sink")))
    (lambda (time:i64 delta_t:double)
      ;; step glib event loop
      (g_main_context_iteration null 0)
      ;; draw texture
      (glClear GL_COLOR_BUFFER_BIT)
      ;; draw the world
      (let ((texloc (glGetUniformLocation sp "tex")))
        (glUseProgram sp)
        (glUniform1i texloc 0))
      (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
      (glfwSwapBuffers window)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time gl_draw_loop next_time delta_t)))))

($ (gst_init null null))

;; (gl_draw_loop (now) (/ 1. 1.))

;; (bind-func gl_draw_loop
;;   (lambda (time:i64 delta_t:double)
;;     (println "gl_draw_loop callback stopped")
;;     #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; start your movies here!

;; (xtm_play "file:///Users/sorensen/Movies/stp_model.mov")
(xtm_play "file:///Users/ben/Desktop/showreel.mov")
